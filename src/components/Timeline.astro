---
interface Props {
  title: string,
  items: Array<{ title: string, place: string, dateRange: string, content?: string | Array<string> }>
}

const { title, items } = Astro.props;
---
<h3>{title}</h3>
<div class="timeline">
  { items.map(item => (
    <div class="timeline-item">
      <span class="timeline-item_date">{item.dateRange}</span>
      <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="320 -800 640 640" width="24px" fill="currentColor"><path d="M640-320q66 0 113-47t47-113q0-66-47-113t-113-47q-66 0-113 47t-47 113q0 66 47 113t113 47Zm0 80q-90 0-156.5-57T403-440H80v-80h323q14-86 80.5-143T640-720q100 0 170 70t70 170q0 100-70 170t-170 70Zm0-240Z"/></svg>
      <p class="timeline-item_header"><b>{item.title}</b> @ {item.place}</p>
      { typeof item?.content === 'string'
        ? <p class="timeline-item_body">{item.content}</p>
        : <ul class="timeline-item_body">{item.content?.map((contentItem) => <li>{contentItem}</li>)}</ul>
      }
    </div>
  )) }
</div>
<style>
  .timeline {
    margin: 0 1rem;
    border-left: solid 0.2rem var(--bgColor-accent);
  }

  .timeline-item {
    display: grid;
    grid-template-rows: 1fr auto auto;
    grid-template-columns: auto 1fr;
    align-items: center;
    column-gap: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .timeline-item svg {
    grid-row: 1 / 2;
    color: var(--bgColor-accent);
  }

  .timeline-item_date {
    grid-row: 1 / 2;
    grid-column: 2 / 3;
    text-transform: uppercase;
  }

  .timeline-item_header {
    grid-row: 2 / 3;
    grid-column: 2 / 3;
    /* margin: 0; */
  }

  .timeline-item_body {
    grid-column: 2 / 3;
    font-family: inherit;
    line-height: 1.5;
    text-wrap: pretty;
    padding-left: 1.5rem;
    margin: 0;
  }
</style>
